{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/timSort.js","SortingVisualiser/SortingVisualiser.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","length","animations","m","i","start","middle","end","Math","min","merge","mergeSort","slice","console","log","left","right","j","k","push","getQuickSortAnimations","quickSortHelper","pi","pivot","temp","partition","getTimSortAnimations","chunkSize","insertionSort","sorted","timSortHelper","SortingVisualiser","props","state","bars","sorting","this","resetArray","window","addEventListener","bind","removeEventListener","max","numBars","innerWidth","height","innerHeight","maxBarHeight","floor","random","setState","animate","insertionSortHelper","getInsertionSortAnimations","minIndex","selectionSortHelper","getSelectionSortAnimations","bubbleSortHelper","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","setTimeout","style","backgroundColor","bar1","newHeight","sort","a","b","className","map","value","idx","key","display","onClick","quickSort","timSort","selectionSort","bubbleSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAAO,SAASA,EAAuBC,GACnC,OAAIA,EAAMC,QAAU,EAAUD,EAMlC,SAAmBA,GAEf,IADA,IAAME,EAAa,GACXC,EAAI,EAAGA,EAAIH,EAAMC,OAAQE,GAAI,EACjC,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAMC,OAAQG,GAAK,EAAID,EAAG,CACzC,IAAIE,EAAQD,EACRE,EAASF,EAAID,EACbI,EAAMC,KAAKC,IAAIL,EAAI,EAAED,EAAGH,EAAMC,QAClCS,EAAMV,EAAOK,EAAOC,EAAQC,EAAKL,GAGzC,OAAOA,EAdUS,CADNX,EAAMY,SAkBrB,SAASF,EAAMV,EAAOK,EAAOC,EAAQC,EAAKL,GACtCW,QAAQC,IAAI,UAAYT,EAAQ,YAAcC,EAAS,SAAWC,GAOlE,IANA,IAAIQ,EAAOf,EAAMY,MAAMP,EAAOC,GAC1BU,EAAQhB,EAAMY,MAAMN,EAAQC,GAE5BH,EAAI,EACJa,EAAI,EACJC,EAAIb,EACFD,EAAIW,EAAKd,QAAUgB,EAAID,EAAMf,QAC/BC,EAAWiB,KAAK,CAAC,CAACd,EAAQD,EAAGE,EAASW,IAAI,IACvCF,EAAKX,IAAMY,EAAMC,IAChBf,EAAWiB,KAAK,CAAC,CAACD,EAAGH,EAAKX,KAAK,IAC/BJ,EAAMkB,GAAKH,EAAKX,GAChBA,GAAK,IAELF,EAAWiB,KAAK,CAAC,CAACD,EAAGF,EAAMC,KAAK,IAChCjB,EAAMkB,GAAKF,EAAMC,GACjBA,GAAK,GAETC,IAEJ,KAAMd,EAAIW,EAAKd,QACXC,EAAWiB,KAAK,CAAC,CAACd,EAAQD,IAAI,IAC9BF,EAAWiB,KAAK,CAAC,CAACD,EAAGH,EAAKX,KAAK,IAC/BJ,EAAMkB,GAAKH,EAAKX,GAChBA,GAAK,EACLc,GAAK,EAET,KAAMD,EAAID,EAAMf,QACZC,EAAWiB,KAAK,CAAC,CAACb,EAASW,IAAI,IAC/Bf,EAAWiB,KAAK,CAAC,CAACD,EAAGF,EAAMC,KAAK,IAChCjB,EAAMkB,GAAKF,EAAMC,GACjBA,GAAK,EACLC,GAAK,ECrDN,SAASE,EAAuBpB,GACnC,IAAME,EAAa,GACnB,OAAIF,EAAMC,QAAU,EAAUD,GAMlC,SAASqB,EAAgBrB,EAAOK,EAAOE,EAAKL,GACxC,GAAGG,EAAQE,EAAK,CACZ,IAAMe,EAMd,SAAmBtB,EAAOK,EAAOE,EAAKL,GAClC,IAAIE,EAAIC,EACJY,EAAIV,EAAM,EACRgB,EAAQvB,EAAMK,GACpB,OAAY,CACR,KAAML,IAAQI,IAAMmB,GACbnB,IAAMG,GACTL,EAAWiB,KAAK,CAAC,CAACf,IAAI,IAE1B,KAAMJ,IAAQiB,IAAMM,GACbN,IAAMZ,GACTH,EAAWiB,KAAK,CAAC,CAACF,IAAI,IAE1B,GAAGA,GAAKb,EAAG,MACXF,EAAWiB,KAAK,CAAC,CAACf,EAAGJ,EAAMiB,KAAK,IAChCf,EAAWiB,KAAK,CAAC,CAACF,EAAGjB,EAAMI,KAAK,IAChC,IAAMoB,EAAOxB,EAAMI,GACnBJ,EAAMI,GAAKJ,EAAMiB,GACjBjB,EAAMiB,GAAKO,EAEftB,EAAWiB,KAAK,CAAC,CAACd,EAAOL,EAAMiB,KAAK,IACpCf,EAAWiB,KAAK,CAAC,CAACF,EAAGjB,EAAMK,KAAS,IACpC,IAAMmB,EAAOxB,EAAMK,GAGnB,OAFAL,EAAMK,GAASL,EAAMiB,GACrBjB,EAAMiB,GAAKO,EACJP,EA/BQQ,CAAUzB,EAAOK,EAAOE,EAAKL,GACxCmB,EAAgBrB,EAAOK,EAAOiB,EAAK,EAAGpB,GACtCmB,EAAgBrB,EAAOsB,EAAK,EAAGf,EAAKL,IARxCmB,CADWrB,EAAMY,QACK,EAAGZ,EAAMC,OAAS,EAAGC,GACpCA,GCLJ,SAASwB,EAAqB1B,EAAO2B,GACxC,IAAMzB,EAAa,GACnB,OAAIF,EAAMC,QAAU,EAAUD,GAMlC,SAAuBA,EAAO2B,EAAWzB,GACrC,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAMC,OAAQG,GAAKuB,EAClCC,EAAc5B,EAAOI,EAAGI,KAAKC,IAAKL,EAAIuB,EAAY,EAAK3B,EAAMC,OAAS,GAAKC,GAG/E,IAAI2B,GAAS,EACb,MAAOA,GAAQ,CACXA,GAAS,EAGT,IAFA,IAAIxB,EAAQ,EACRC,GAAU,EACNF,EAAI,EAAGA,EAAIJ,EAAMC,OAAQG,IAAK,CAClC,GAAGA,EAAI,IAAMJ,EAAMC,QAAU4B,EACzB,QACM7B,EAAMI,GAAKJ,EAAMI,EAAI,IAAMA,EAAI,IAAMJ,EAAMC,UACjD4B,GAAS,GACM,IAAZvB,EACCA,EAASF,EAAI,GAEbM,EAAMV,EAAOK,EAAOC,EAAQF,EAAI,EAAGF,GACnCG,EAAQD,EAAI,EACZE,GAAU,IAItBA,GAAU,GA5BdwB,CADW9B,EAAMY,QACGe,EAAWzB,GACxBA,GAgCX,SAAS0B,EAAc5B,EAAOK,EAAOE,EAAKL,GACtC,IAAI,IAAIE,EAAIC,EAAQ,EAAGD,GAAKG,EAAKH,IAAK,CAClCF,EAAWiB,KAAK,CAAC,CAACf,IAAI,IAGtB,IAFA,IAAIc,EAAIlB,EAAMI,GACVa,EAAIb,EAAI,EACNa,GAAKZ,GAASL,EAAMiB,GAAKC,GAC3BhB,EAAWiB,KAAK,CAAC,CAACF,EAAGA,EAAI,IAAI,IAC7BjB,EAAMiB,EAAI,GAAKjB,EAAMiB,GACrBf,EAAWiB,KAAK,CAAC,CAACF,EAAI,EAAGjB,EAAMiB,KAAK,IACpCA,GAAK,EAETjB,EAAMiB,EAAI,GAAKC,EACfhB,EAAWiB,KAAK,CAAC,CAACF,EAAI,EAAGC,IAAI,KAIrC,SAASR,EAAMV,EAAOK,EAAOC,EAAQC,EAAKL,GAOtC,IANA,IAAIa,EAAOf,EAAMY,MAAMP,EAAOC,GAC1BU,EAAQhB,EAAMY,MAAMN,EAAQC,GAE5BH,EAAI,EACJa,EAAI,EACJC,EAAIb,EACFD,EAAIW,EAAKd,QAAUgB,EAAID,EAAMf,QAC/BC,EAAWiB,KAAK,CAAC,CAACd,EAAQD,EAAGE,EAASW,IAAI,IACvCF,EAAKX,IAAMY,EAAMC,IAChBf,EAAWiB,KAAK,CAAC,CAACD,EAAGH,EAAKX,KAAK,IAC/BJ,EAAMkB,GAAKH,EAAKX,GAChBA,GAAK,IAELF,EAAWiB,KAAK,CAAC,CAACD,EAAGF,EAAMC,KAAK,IAChCjB,EAAMkB,GAAKF,EAAMC,GACjBA,GAAK,GAETC,IAEJ,KAAMd,EAAIW,EAAKd,QACXC,EAAWiB,KAAK,CAAC,CAACd,EAAQ,IAAI,IAC9BH,EAAWiB,KAAK,CAAC,CAACD,EAAGH,EAAKX,KAAK,IAC/BJ,EAAMkB,GAAKH,EAAKX,GAChBA,GAAK,EACLc,GAAK,EAET,KAAMD,EAAID,EAAMf,QACZC,EAAWiB,KAAK,CAAC,CAACb,EAASW,IAAI,IAC/Bf,EAAWiB,KAAK,CAAC,CAACD,EAAGF,EAAMC,KAAK,IAChCjB,EAAMkB,GAAKF,EAAMC,GACjBA,GAAK,EACLC,GAAK,EC3Eb,IAIqBa,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,SAAS,GAJE,E,gEAUfC,KAAKC,aACLC,OAAOC,iBAAiB,SAAUH,KAAKC,WAAWG,KAAKJ,S,6CAKvDE,OAAOG,oBAAoB,SAAUL,KAAKC,WAAWG,KAAKJ,S,mCAM1D,IAAGA,KAAKH,MAAME,QAAd,CAWA,IAVA,IA2IuB1B,EAAKiC,EA3ItB1C,EAAQ,GAIR2C,GAFQL,OAAOM,WACW,KACE,EAG5BC,EAASP,OAAOQ,YAChBC,EAAevC,KAAKkC,IAAKG,EAAS,IAAM,KAErCzC,EAAI,EAAGA,EAAIuC,EAASvC,IACzBJ,EAAMmB,MAgIaV,EAhIc,EAgITiC,EAhIYK,EAiIrCvC,KAAKwC,MAAMxC,KAAKyC,UAAYP,EAAMjC,EAAM,GAAKA,KA/HhD2B,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACC,KAAMlC,S,kCAKjB,IAAGoC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACZ,MAAM,CAACE,SAAS,MAEnB,IAAMjC,EAAakB,EAAuBgB,KAAKH,MAAMC,MACrDE,KAAKe,QAAQjD,M,kCAIb,IAAGkC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACE,SAAS,MAEpB,IAAMjC,EAAaH,EAAuBqC,KAAKH,MAAMC,MACrDE,KAAKe,QAAQjD,M,gCAIb,IAAGkC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACE,SAAS,MAEpB,IAAMjC,EAAawB,EAAqBU,KAAKH,MAAMC,KAAM,IACzDE,KAAKe,QAAQjD,M,sCAIb,IAAGkC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACE,SAAS,MAEpB,IAAMjC,ECxFP,SAAoCF,GACvC,IAAME,EAAa,GACnB,OAAIF,EAAMC,QAAU,EAAUD,GAMlC,SAA6BA,EAAOE,GAChC,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAMC,OAAQG,IAAK,CAClCF,EAAWiB,KAAK,CAAC,CAACf,IAAI,IAGtB,IAFA,IAAIc,EAAIlB,EAAMI,GACVa,EAAIb,EAAI,EACNa,GAAK,GAAKjB,EAAMiB,GAAKC,GACvBhB,EAAWiB,KAAK,CAAC,CAACF,EAAGA,EAAI,EAAGb,IAAI,IAChCJ,EAAMiB,EAAI,GAAKjB,EAAMiB,GACrBf,EAAWiB,KAAK,CAAC,CAACF,EAAI,EAAGjB,EAAMiB,KAAK,IACpCA,GAAK,EAETjB,EAAMiB,EAAI,GAAKC,EACfhB,EAAWiB,KAAK,CAAC,CAACF,EAAI,EAAGC,IAAI,KAhBjCkC,CADWpD,EAAMY,QACSV,GACnBA,GDmFgBmD,CAA2BjB,KAAKH,MAAMC,MACzDE,KAAKe,QAAQjD,M,sCAIb,IAAGkC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACE,SAAS,MAEpB,IAAMjC,EEjGP,SAAoCF,GACvC,IAAME,EAAa,GACnB,OAAIF,EAAMC,QAAU,EAAUD,GAMlC,SAA6BA,EAAOE,GAChC,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAMC,OAAS,EAAGG,IAAK,CAEtC,IADA,IAAIkD,EAAWlD,EACPa,EAAIb,EAAI,EAAGa,EAAIjB,EAAMC,OAAQgB,IACjCf,EAAWiB,KAAK,CAAC,CAACF,EAAGb,IAAI,IACtBJ,EAAMiB,GAAKjB,EAAMsD,KAChBA,EAAWrC,GAEnBf,EAAWiB,KAAK,CAAC,CAACf,EAAGJ,EAAMsD,KAAY,IACvCpD,EAAWiB,KAAK,CAAC,CAACmC,EAAUtD,EAAMI,KAAK,IACvC,IAAMoB,EAAOxB,EAAMI,GACnBJ,EAAMI,GAAKJ,EAAMsD,GACjBtD,EAAMsD,GAAY9B,GAhBtB+B,CADWvD,EAAMY,QACSV,GACnBA,GF4FgBsD,CAA2BpB,KAAKH,MAAMC,MACzDE,KAAKe,QAAQjD,M,mCAIb,IAAGkC,KAAKH,MAAME,QAAd,CACAC,KAAKc,UAAS,SAACjB,GACX,MAAM,CAACE,SAAS,MAEpB,IAAMjC,EG1GP,SAAiCF,GACpC,IAAME,EAAa,GACnB,OAAIF,EAAMC,QAAU,EAAUD,GAMlC,SAA0BA,EAAOE,GAC7B,IAAI,IAAIE,EAAI,EAAGA,EAAIJ,EAAMC,OAAS,EAAGG,IACjC,IAAI,IAAIa,EAAI,EAAGA,EAAIjB,EAAMC,OAASG,EAAI,EAAGa,IAGrC,GAFAf,EAAWiB,KAAK,CAAC,CAACF,EAAGA,EAAI,IAAI,IAE1BjB,EAAMiB,GAAKjB,EAAMiB,EAAI,GAAI,CACxBf,EAAWiB,KAAK,CAAC,CAACF,EAAGjB,EAAMiB,EAAI,KAAK,IACpCf,EAAWiB,KAAK,CAAC,CAACF,EAAI,EAAGjB,EAAMiB,KAAK,IACpC,IAAMO,EAAOxB,EAAMiB,GACnBjB,EAAMiB,GAAKjB,EAAMiB,EAAI,GACrBjB,EAAMiB,EAAI,GAAKO,GAd3BiC,CADWzD,EAAMY,QACMV,GAChBA,GHqGgBwD,CAAwBtB,KAAKH,MAAMC,MACtDE,KAAKe,QAAQjD,M,8BAGTA,GAGJ,IAHiB,IAAD,OACVyD,EAAYC,SAASC,uBAAuB,aAC9C3C,EAAI,EAFQ,WAGRd,GAEJ,IADqBF,EAAWE,GAAG,GACnB,CACZ,IAAM8B,EAAOhC,EAAWE,GAAG,GAC3BS,QAAQC,IAAIoB,GACZ4B,YAAW,WACP,IAAI,IAAI7C,EAAI,EAAGA,EAAIiB,EAAKjC,OAAQgB,IAC5B0C,EAAUzB,EAAKjB,IAAI8C,MAAMC,gBA5GzB,SAFG,EAgHR9C,KACH4C,YAAW,WACP,IAAI,IAAI7C,EAAI,EAAGA,EAAIiB,EAAKjC,OAAQgB,IAC5B0C,EAAUzB,EAAKjB,IAAI8C,MAAMC,gBAlH3B,YADK,EAqHR9C,UAEH4C,YAAW,WAAO,IAAD,cACa5D,EAAWE,GAAG,GAD3B,GACN6D,EADM,KACAC,EADA,KAEKP,EAAUM,GAAMF,MACxBlB,OAAV,UAAsBqB,EAAtB,QA1HO,EA4HRhD,KAGJd,IAAMF,EAAWD,OAAS,GACzB6D,YAAW,WACP,EAAKZ,UAAS,SAACjB,GACX,MAAM,CACFC,KAAM,EAAKD,MAAMC,KAAKiC,MAAK,SAASC,EAAGC,GAAI,OAAOD,EAAIC,KACtDlC,SAAS,QApIV,EAuIRjB,MAhCHd,EAAI,EAAGA,EAAIF,EAAWD,OAAQG,IAAM,EAApCA,K,+BAqCF,IAAD,OACCJ,EAAQoC,KAAKH,MAAMC,KAEzB,OACI,yBAAKoC,UAAU,mBACVtE,EAAMuE,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIH,UAAU,YACVI,IAAKD,EACLV,MAAO,CAAClB,OAAO,GAAD,OAAK2B,EAAL,YAEtB,qDACA,yBAAKF,UAAU,OAAOP,MAAO,CAACY,QAAS,UACnC,4BAAQL,UAAU,qBAAqBM,QAAS,kBAAM,EAAKvC,eAA3D,aACA,4BAAQiC,UAAU,oBAAoBM,QAAS,kBAAM,EAAKC,cAA1D,cACA,4BAAQP,UAAU,oBAAoBM,QAAS,kBAAM,EAAKjE,cAA1D,cACA,4BAAQ2D,UAAU,oBAAoBM,QAAS,kBAAM,EAAKE,YAA1D,YACA,4BAAQR,UAAU,oBAAoBM,QAAS,kBAAM,EAAKhD,kBAA1D,kBACA,4BAAQ0C,UAAU,oBAAoBM,QAAS,kBAAM,EAAKG,kBAA1D,kBACA,4BAAQT,UAAU,oBAAoBM,QAAS,kBAAM,EAAKI,eAA1D,qB,GA3J2BC,IAAMC,WICtCC,MAXf,WACE,OACE,yBAAKb,UAAU,OACX,gCACI,wBAAIA,UAAU,SAAd,uBAEJ,kBAAC,EAAD,QCEYc,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtF,QAAQsF,MAAMA,EAAMC,c","file":"static/js/main.a55a9c3d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    let animations = mergeSort(copy);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSort(array) {\r\n    const animations = [];\r\n    for(let m = 1; m < array.length; m = 2 * m) {\r\n        for(let i = 0; i < array.length; i += 2 * m) {\r\n            let start = i;\r\n            let middle = i + m;\r\n            let end = Math.min(i + 2*m, array.length);\r\n            merge(array, start, middle, end, animations);\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction merge(array, start, middle, end, animations) {\r\n    console.log(\"Start: \" + start + \" Middle: \" + middle + \" End: \" + end);\r\n    let left = array.slice(start, middle);\r\n    let right = array.slice(middle, end);\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = start;\r\n    while(i < left.length && j < right.length) {\r\n        animations.push([[start + i, middle + j], false]);\r\n        if(left[i] <= right[j]) {\r\n            animations.push([[k, left[i]], true]);\r\n            array[k] = left[i];\r\n            i += 1;\r\n        } else {\r\n            animations.push([[k, right[j]], true]);\r\n            array[k] = right[j];\r\n            j += 1;\r\n        }\r\n        k++;\r\n    }\r\n    while(i < left.length) {\r\n        animations.push([[start + i], false]);\r\n        animations.push([[k, left[i]], true]);\r\n        array[k] = left[i];\r\n        i += 1;\r\n        k += 1;\r\n    }\r\n    while(j < right.length) {\r\n        animations.push([[middle + j], false]);\r\n        animations.push([[k, right[j]], true]);\r\n        array[k] = right[j];\r\n        j += 1;\r\n        k += 1;\r\n    }\r\n}\r\n\r\n","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    quickSortHelper(copy, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, animations) {\r\n    if(start < end) {\r\n        const pi = partition(array, start, end, animations);\r\n        quickSortHelper(array, start, pi - 1, animations);\r\n        quickSortHelper(array, pi + 1, end, animations);\r\n    }\r\n}\r\n\r\nfunction partition(array, start, end, animations) {\r\n    let i = start;\r\n    let j = end + 1;\r\n    const pivot = array[start];\r\n    while(true) {\r\n        while(array[++i] <= pivot ) {\r\n            if(i === end) break;\r\n            animations.push([[i], false]);\r\n        }\r\n        while(array[--j] >= pivot) {\r\n            if(j === start) break;\r\n            animations.push([[j], false]);\r\n        }\r\n        if(j <= i) break;\r\n        animations.push([[i, array[j]], true]);\r\n        animations.push([[j, array[i]], true]);\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    animations.push([[start, array[j]], true]);\r\n    animations.push([[j, array[start]], true]);\r\n    const temp = array[start];\r\n    array[start] = array[j];\r\n    array[j] = temp;\r\n    return j;\r\n}","export function getTimSortAnimations(array, chunkSize) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    timSortHelper(copy, chunkSize, animations);\r\n    return animations;\r\n}\r\n\r\nfunction timSortHelper(array, chunkSize, animations) {\r\n    for(let i = 0; i < array.length; i += chunkSize) {\r\n        insertionSort(array, i, Math.min((i + chunkSize - 1), (array.length - 1)), animations);\r\n    }\r\n\r\n    let sorted = false;\r\n    while(!sorted) {\r\n        sorted = true;\r\n        let start = 0;\r\n        let middle = -1;\r\n        for(let i = 0; i < array.length; i++) {\r\n            if(i + 1 === array.length && sorted) {\r\n                return;\r\n            } else if(array[i] > array[i + 1] || i + 1 === array.length) {\r\n                sorted = false;\r\n                if(middle === -1) {\r\n                    middle = i + 1;\r\n                } else {\r\n                    merge(array, start, middle, i + 1, animations);\r\n                    start = i + 1;\r\n                    middle = -1;\r\n                }\r\n            }\r\n        }\r\n        middle = -1;\r\n\r\n    }\r\n}\r\n\r\nfunction insertionSort(array, start, end, animations) {\r\n    for(let i = start + 1; i <= end; i++) {\r\n        animations.push([[i], false]);\r\n        let k = array[i];\r\n        let j = i - 1;\r\n        while(j >= start && array[j] > k) {\r\n            animations.push([[j, j + 1], false]);\r\n            array[j + 1] = array[j];\r\n            animations.push([[j + 1, array[j]], true]);\r\n            j -= 1;\r\n        }\r\n        array[j + 1] = k;\r\n        animations.push([[j + 1, k], true]);\r\n    }\r\n}\r\n\r\nfunction merge(array, start, middle, end, animations) {\r\n    let left = array.slice(start, middle);\r\n    let right = array.slice(middle, end);\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n    let k = start;\r\n    while(i < left.length && j < right.length) {\r\n        animations.push([[start + i, middle + j], false]);\r\n        if(left[i] <= right[j]) {\r\n            animations.push([[k, left[i]], true]);\r\n            array[k] = left[i];\r\n            i += 1;\r\n        } else {\r\n            animations.push([[k, right[j]], true]);\r\n            array[k] = right[j];\r\n            j += 1;\r\n        }\r\n        k++;\r\n    }\r\n    while(i < left.length) {\r\n        animations.push([[start + 1], false]);\r\n        animations.push([[k, left[i]], true]);\r\n        array[k] = left[i];\r\n        i += 1;\r\n        k += 1;\r\n    }\r\n    while(j < right.length) {\r\n        animations.push([[middle + j], false]);\r\n        animations.push([[k, right[j]], true]);\r\n        array[k] = right[j];\r\n        j += 1;\r\n        k += 1;\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport {getMergeSortAnimations} from \"../sortingAlgorithms/mergeSort\";\r\nimport {getBubbleSortAnimations} from \"../sortingAlgorithms/bubbleSort\";\r\nimport {getQuickSortAnimations} from \"../sortingAlgorithms/quickSort\";\r\nimport {getInsertionSortAnimations} from \"../sortingAlgorithms/insertionSort\";\r\nimport {getSelectionSortAnimations} from \"../sortingAlgorithms/selectionSort\";\r\nimport {getTimSortAnimations} from \"../sortingAlgorithms/timSort\";\r\n\r\n// Constants used\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst PRIMARY_COLOR = '#ff59ac';\r\nconst SECONDARY_COLOR = 'blue';\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bars: [],\r\n            sorting: false,\r\n        };\r\n    }\r\n\r\n    // Reset the array on component mount and on window resize\r\n    componentDidMount() {\r\n        this.resetArray();\r\n        window.addEventListener(\"resize\", this.resetArray.bind(this));\r\n    }\r\n\r\n    // Remove the event listener when component unmounts\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resetArray.bind(this));\r\n    }\r\n\r\n\r\n\r\n    resetArray() {\r\n        if(this.state.sorting) return;\r\n        const array = [];\r\n        // Determine amount of bars to create\r\n        const width = window.innerWidth;\r\n        const container_width = width - 100;\r\n        const numBars = container_width / 4;\r\n\r\n        // Determine how tall to make the bars\r\n        const height = window.innerHeight;\r\n        const maxBarHeight = Math.max((height - 350), 100);\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(randomIntFromInterval(5, maxBarHeight));\r\n        }\r\n        this.setState((state) => {\r\n            return{bars: array};\r\n        })\r\n    }\r\n\r\n    quickSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n           return{sorting: true};\r\n        });\r\n        const animations = getQuickSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    mergeSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n            return{sorting: true};\r\n        });\r\n        const animations = getMergeSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    timSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n            return{sorting: true};\r\n        });\r\n        const animations = getTimSortAnimations(this.state.bars, 25);\r\n        this.animate(animations);\r\n    }\r\n\r\n    insertionSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n            return{sorting: true};\r\n        });\r\n        const animations = getInsertionSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    selectionSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n            return{sorting: true};\r\n        });\r\n        const animations = getSelectionSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    bubbleSort() {\r\n        if(this.state.sorting) return;\r\n        this.setState((state) => {\r\n            return{sorting: true};\r\n        });\r\n        const animations = getBubbleSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    animate(animations) {\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        let k = 0\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const colorChange = !animations[i][1];\r\n            if(colorChange) {\r\n                const bars = animations[i][0];\r\n                console.log(bars);\r\n                setTimeout(() => {\r\n                    for(let j = 0; j < bars.length; j++) {\r\n                        arrayBars[bars[j]].style.backgroundColor = SECONDARY_COLOR;\r\n                    }\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    for(let j = 0; j < bars.length; j++) {\r\n                        arrayBars[bars[j]].style.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [bar1, newHeight] = animations[i][0];\r\n                    const bar1style = arrayBars[bar1].style;\r\n                    bar1style.height = `${newHeight}px`;\r\n\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            if(i === animations.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState((state) => {\r\n                        return{\r\n                            bars: this.state.bars.sort(function(a, b) {return a - b}),\r\n                            sorting: false\r\n                        };\r\n                    })\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.bars\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{height: `${value}px`}}/>\r\n                ))}\r\n                <p>Choose your algorithm:</p>\r\n                <div className=\"menu\" style={{display: \"block\"}}>\r\n                    <button className=\"button arrayButton\" onClick={() => this.resetArray()}>New Array</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.timSort()}>Tim Sort</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button className=\"button sortButton\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Returns a random integer between the given interval.\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    insertionSortHelper(copy, animations);\r\n    return animations;\r\n}\r\n\r\nfunction insertionSortHelper(array, animations) {\r\n    for(let i = 1; i < array.length; i++) {\r\n        animations.push([[i], false]);\r\n        let k = array[i];\r\n        let j = i - 1;\r\n        while(j >= 0 && array[j] > k) {\r\n            animations.push([[j, j + 1, i], false]);\r\n            array[j + 1] = array[j];\r\n            animations.push([[j + 1, array[j]], true]);\r\n            j -= 1;\r\n        }\r\n        array[j + 1] = k;\r\n        animations.push([[j + 1, k], true]);\r\n    }\r\n}","export function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    selectionSortHelper(copy, animations);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations) {\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        let minIndex = i;\r\n        for(let j = i + 1; j < array.length; j++) {\r\n            animations.push([[j, i], false]);\r\n            if(array[j] < array[minIndex])\r\n                minIndex = j;\r\n        }\r\n        animations.push([[i, array[minIndex]], true]);\r\n        animations.push([[minIndex, array[i]], true]);\r\n        const temp = array[i];\r\n        array[i] = array[minIndex];\r\n        array[minIndex] = temp;\r\n    }\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    let copy = array.slice();\r\n    bubbleSortHelper(copy, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            animations.push([[j, j + 1], false]);\r\n\r\n            if(array[j] > array[j + 1]) {\r\n                animations.push([[j, array[j + 1]], true]);\r\n                animations.push([[j + 1, array[j]], true]);\r\n                const temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport SortingVisualiser from \"./SortingVisualiser/SortingVisualiser\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n            <h1 className=\"title\">SORTING VISUALISER</h1>\n        </header>\n        <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}