{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","SortingVisualiser/SortingVisualiser.js","sortingAlgorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","copy","slice","mergeSortHelper","start","end","middle","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","pi","pivot","temp","partition","SortingVisualiser","props","state","bars","this","resetArray","min","max","numBars","window","innerWidth","maxBarHeight","innerHeight","random","setState","animate","bubbleSortHelper","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","setTimeout","style","backgroundColor","bar1","newHeight","height","className","map","value","idx","key","display","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7329e6f.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const copy = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, copy, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(array, start, end, copy, animations) {\r\n    if (start >= end) return;\r\n    const middle = Math.floor((start + end) / 2);\r\n    mergeSortHelper(copy, start, middle, array, animations);\r\n    mergeSortHelper(copy, middle + 1, end, array, animations);\r\n    doMerge(array, start, middle, end, copy, animations);\r\n}\r\n\r\nfunction doMerge(array, start, middle, end, copy, animations) {\r\n    let k = start;\r\n    let i = start;\r\n    let j = middle + 1;\r\n    while (i <= middle && j <= end) {\r\n        animations.push([[i, j], false]);\r\n\r\n        if (copy[i] <= copy[j]) {\r\n            animations.push([[k, copy[i]], true]);\r\n            array[k++] = copy[i++];\r\n        } else {\r\n            animations.push([[k, copy[j]], true]);\r\n            array[k++] = copy[j++];\r\n        }\r\n    }\r\n    while (i <= middle) {\r\n        animations.push([[i, i], false]);\r\n        animations.push([[k, copy[i]], true]);\r\n        array[k++] = copy[i++];\r\n    }\r\n    while (j <= end) {\r\n        animations.push([[j, j], false]);\r\n        animations.push([[k, copy[j]], true]);\r\n        array[k++] = copy[j++];\r\n    }\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, start, end, animations) {\r\n    if(start < end) {\r\n        const pi = partition(array, start, end, animations);\r\n        quickSortHelper(array, start, pi - 1, animations);\r\n        quickSortHelper(array, pi + 1, end, animations);\r\n    }\r\n}\r\n\r\nfunction partition(array, start, end, animations) {\r\n    let i = start;\r\n    let j = end + 1;\r\n    const pivot = array[start];\r\n    while(true) {\r\n        while(array[++i] <= pivot ) {\r\n            if(i === end) break;\r\n            animations.push([[i], false]);\r\n        }\r\n        while(array[--j] >= pivot) {\r\n            if(j === start) break;\r\n            animations.push([[j], false]);\r\n        }\r\n        if(j <= i) break;\r\n        animations.push([[i, array[j]], true]);\r\n        animations.push([[j, array[i]], true]);\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    animations.push([[start, array[j]], true]);\r\n    animations.push([[j, array[start]], true]);\r\n    const temp = array[start];\r\n    array[start] = array[j];\r\n    array[j] = temp;\r\n    return j;\r\n}","import React from 'react';\r\nimport './SortingVisualiser.css';\r\nimport {getMergeSortAnimations} from \"../sortingAlgorithms/mergeSort\";\r\nimport {getBubbleSortAnimations} from \"../sortingAlgorithms/bubbleSort\";\r\nimport {getQuickSortAnimations} from \"../sortingAlgorithms/quickSort\";\r\n\r\n// Constants used\r\nconst ANIMATION_SPEED_MS = 1;\r\nconst PRIMARY_COLOR = '#ff59ac';\r\nconst SECONDARY_COLOR = 'blue';\r\n\r\nexport default class SortingVisualiser extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            bars: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n\r\n        const array = [];\r\n        // Determine amount of bars to create\r\n        const width = window.innerWidth;\r\n        const container_width = width - 100;\r\n        const numBars = container_width / 4;\r\n\r\n        // Determine how tall to make the bars\r\n        const height = window.innerHeight;\r\n        const maxBarHeight = (height - 200)\r\n\r\n        for (let i = 0; i < numBars; i++) {\r\n            array.push(randomIntFromInterval(5, maxBarHeight));\r\n        }\r\n        this.setState({\r\n            bars: array\r\n        });\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = getQuickSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    heapSort() {\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.bars);\r\n        this.animate(animations);\r\n    }\r\n\r\n    animate(animations) {\r\n        let k = 0\r\n        for(let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const colorChange = !animations[i][1];\r\n            if(colorChange) {\r\n                const bars = animations[i][0];\r\n                setTimeout(() => {\r\n                    for(let j = 0; j < bars.length; j++) {\r\n                        arrayBars[bars[j]].style.backgroundColor = SECONDARY_COLOR;\r\n                    }\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n                setTimeout(() => {\r\n                    for(let j = 0; j < bars.length; j++) {\r\n                        arrayBars[bars[j]].style.backgroundColor = PRIMARY_COLOR;\r\n                    }\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [bar1, newHeight] = animations[i][0];\r\n                    const bar1style = arrayBars[bar1].style;\r\n                    bar1style.height = `${newHeight}px`;\r\n                }, k++ * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.bars\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{height: `${value}px`}}/>\r\n                ))}\r\n                <div style={{display: \"block\"}}>\r\n                    <button onClick={() => this.resetArray()}>Generate New Array!</button>\r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Returns a random integer between the given interval.\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    for(let i = 0; i < array.length - 1; i++) {\r\n        for(let j = 0; j < array.length - i - 1; j++) {\r\n            animations.push([[j, j + 1], false]);\r\n\r\n            if(array[j] > array[j + 1]) {\r\n                animations.push([[j, array[j + 1]], true]);\r\n                animations.push([[j + 1, array[j]], true]);\r\n                const temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n            <h1 className=\"title\">SORTING VISUALISER</h1>\n        </header>\n        <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}